{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "55b5595c-fec9-41c3-b756-b95cd0c52048",
   "metadata": {},
   "source": [
    "# Network comparison\n",
    "\n",
    "In some cases, it might be of interest to compare two networks with each other. For instance, you might want to compare an existing network with the Neko-generated network, or compare the resulting networks from two different network construction strategies.\n",
    "\n",
    "The following code shows the comparison of two networks, built with different input parameters of the `complete_connections` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3c317de8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 5.76 s, sys: 1.66 s, total: 7.42 s\n",
      "Wall time: 5.09 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "from neko.core.network import Network\n",
    "from neko._visual.visualize_network import NetworkVisualizer\n",
    "from neko.inputs import Universe\n",
    "from neko._annotations.gene_ontology import Ontology\n",
    "from neko._methods.compare import compare_networks\n",
    "import omnipath as op"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fe1b7d5",
   "metadata": {},
   "source": [
    "## 1. Define the list of genes of interest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "79c09e13",
   "metadata": {},
   "outputs": [],
   "source": [
    "genes = [\"SRC\", \"NOTCH1\", \"FAK\", \"CDH1\", \"CDH2\", \"VIM\", \"MAP4K4\", \"LATS1\", \"LATS2\", \"PTK2B\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a5b5adf",
   "metadata": {},
   "source": [
    "## 2. Create networks.\n",
    "\n",
    "Please refer to the `Usage` tutorial for a detailed explanation of each step.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2910c871-fdfc-4d20-b76f-af213f06a3f0",
   "metadata": {},
   "source": [
    "### 2A. Build first network\n",
    "\n",
    "For the first network, we specify that we do not want to take into account the concensus sign (i.e. activation vs inhibition) for the interactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fcf68a99-8454-41e3-8816-c3f976d04c0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_net1 = Network(genes, resources = 'omnipath')\n",
    "new_net1.connect_nodes(only_signed=True, consensus_only=True)\n",
    "new_net1.complete_connection(maxlen=6, algorithm=\"bfs\", only_signed=True, connect_with_bias=True, consensus=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82052e91-dd5a-451e-b83c-7df080c1a09b",
   "metadata": {},
   "source": [
    "### 2B. Build second network\n",
    "\n",
    "For the second network, we set the `consensus` argument to `True`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5d13c798-975b-43ef-a841-1fc6176578af",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_net2 = Network(genes, resources = 'omnipath')\n",
    "new_net2.connect_nodes(only_signed=True, consensus_only=True)\n",
    "new_net2.complete_connection(maxlen=3, algorithm=\"dfs\", only_signed=True, connect_with_bias=True, consensus=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "017750d0-582d-4da5-a392-00eddb09e35f",
   "metadata": {},
   "source": [
    "## 3. Compare networks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c1d69b5-1e70-456c-a702-61cb37f52dc3",
   "metadata": {},
   "source": [
    "The compare_networks functions receives as input the two network objects of interest. Its output is two dataframes; one for the comparison of the edges and for the comparison of nodes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "381a43b7-032f-40f7-8846-924901ff0161",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "interaction_comparison, node_comparison = compare_networks(new_net1, new_net2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3aa53d75-38bb-4210-90fa-2cf4535d49e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    source  target           comparison\n",
      "0     ABL1     APP  Unique to Network 2\n",
      "1     ABL1     BTK  Unique to Network 2\n",
      "2     ABL1    CDH2               Common\n",
      "3     ABL1  CTNNB1               Common\n",
      "4     ABL1    EGFR               Common\n",
      "..     ...     ...                  ...\n",
      "715   WNT1   ITGB4  Unique to Network 2\n",
      "716   WNT1    LEF1  Unique to Network 2\n",
      "717   WNT1  MAP3K7  Unique to Network 2\n",
      "718   WNT1  NOTCH1  Unique to Network 2\n",
      "719    ZYX     SRC               Common\n",
      "\n",
      "[720 rows x 3 columns]\n"
     ]
    }
   ],
   "source": [
    "print(interaction_comparison)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8a16da4d-c34f-466a-8e0f-4dfa42a635be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       node           comparison\n",
      "0     IKBKB  Unique to Network 1\n",
      "1     ROCK1  Unique to Network 1\n",
      "2     SNAI2  Unique to Network 1\n",
      "3     PRKG1  Unique to Network 1\n",
      "4      TP63  Unique to Network 1\n",
      "..      ...                  ...\n",
      "101   PTK2B               Common\n",
      "102    PTEN               Common\n",
      "103    CDH2               Common\n",
      "104    CDH1               Common\n",
      "105  MAP4K4               Common\n",
      "\n",
      "[106 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "print(node_comparison)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
