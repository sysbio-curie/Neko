[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "nekomata"
version = "1.1.0"
description = "Package to extract, visualize, convert and study interactions from database into executable activity flow based model"
license = "GNU General Public License Version 3"
authors = [
    "Marco Ruscone <marco.ruscone@curie.fr>",
    "Eirini Tsirvuli <eirini.tsirvouli@ntnu.no>",
    "Andrea Checcoli <andrea.checcoli@curie.fr>"
]
packages = [
    { include = "neko" }
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Bio-Informatics"
]
repository = "https://github.com/sysbio-curie/Neko"
homepage = "https://github.com/sysbio-curie/Neko"
documentation = "https://sysbio-curie.github.io/Neko/"
readme = "README.rst"

[tool.poetry.dependencies]
toml = "*"
notebook = "*"
python = ">=3.10,<4.0"
yfiles_jupyter_graphs = "*"
networkx = "*"
unipressed = "*"
jupyterlab = "*"
pycurl = "*"
graphviz = "*"
pandas = "2.2.2"
pypath-common = "^0.2.5"
omnipath = "1.0.9"
pypath-omnipath = "0.16.20"
paramiko = "<4.0.0"

[tool.poetry.dev-dependencies]
pandoc = "*"
pytest = ">=6.0"
tox = ">=3.20.1"
pre-commit = ">=2.17.0"
bump2version = "*"
coverage = ">=6.0"
pytest-cov = "^6.0.0"
codecov-cli = "^0.8.0"
sphinx = "^7.2.6"
sphinx-last-updated-by-git = ">=0.3"
sphinx-autodoc-typehints = ">=1.18.0"
sphinxcontrib-fulltoc = ">=1.2.0"
sphinxcontrib-bibtex = "^2.6.2"
sphinx-copybutton = "*"
myst-parser = "^2.0.0"
myst-nb = "*"
pydata-sphinx-theme = "*"
sphinx_rtd_theme = "*"
sphinx-remove-toctrees = "*"
numpydoc = "*"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/sysbio-curie/Neko/issues"

[tool.black]
line-length = 80
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
from_first = true
line_length = 80
multi_line_output = 3
include_trailing_comma = true
use_parentheses = true
known_num="numpy,pandas"
sections = "FUTURE,STDLIB,THIRDPARTY,NUM,FIRSTPARTY,LOCALFOLDER"
no_lines_before="LOCALFOLDER"
balanced_wrapping = true
force_grid_wrap = 0
length_sort = "1"
indent = "    "
skip = []

[tool.flake8]
ignore = ["D200", "D202", "D401", "D105", "W503", "W504", "E731"]
per-file-ignores = [
    "docs/src/conf.py:D100",
    "tests/*:D100,D101,D102",
    "*/__init__.py:F401"
]
max-line-length = 80
count = true
exclude = [
    ".git",
    "__pycache__",
    "build",
    "docs/_build",
    "dist"
]

[tool.yapf]
based_on_style = "facebook"
split_penalty_before_if_expr = 0
split_penalty_import_names = 0
split_penalty_comprehension = 0
split_penalty_for_added_line_split = 0
split_penalty_after_opening_bracket = 0
split_before_first_argument = true
split_before_named_assigns = true
split_complex_comprehension = true

[tool.rstcheck]
report_level = "INFO"
ignore_directives = [
    "automodule",
    "toctree",
]
ignore_roles = ["ref"]
ignore_messages = '(Unknown target name:.*|No (directive|role) entry for "(auto)?(class|method|property|function|func|mod|attr)" in module "docutils\.parsers\.rst\.languages\.en"\.)'

[tool.coverage.run]
source = ["neko"]
omit = [
	"**/test_*.py",
    "neko/inputs/_def.py",
]

[tool.pytest.ini_options]
testpaths = [
  "tests",
]
xfail_strict = true
addopts = [
    # "-Werror",  # if 3rd party libs raise DeprecationWarnings, just use filterwarnings below
    "--import-mode=importlib",  # allow using test files with same name
]
filterwarnings = [
    # "ignore:.*U.*mode is deprecated:DeprecationWarning",
]
